/*题目：小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。
但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。
没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列?
输出描述:输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序*/


function FindContinuousSequence(sum)
{
    var result = 0;
    var maxLen = 0;
    for (var i = 1; i <= sum; i++) { // 计算累加到大于sum最多用几个数
        result += i;
        if (result > sum) {
            maxLen = i - 1;
            break;
        }
    }
    
    var tmpArr = [];  // 临时数组，用来存放计算出的累加的数组
    for (var i = 2; i <= maxLen; i++) {
        // 如果是奇数项累加，那么i必须被sum整除
        // 例如12 = 3 + 4 + 5;此处sum = 12, i = 3; i必须被整除才能保证中间数4与两边的差值对称(都是差1)
        // 或者i是偶数,当i是偶数时,所有对称相加都是奇数,即1被左右两边均分,每个数分1/2,所以要保证i被除后小数点为0.5
        // 当偶数项相加时18 = 3 + 4 + 5 + 6;对称的加和是奇数9,18/4 = 4.5 = 4余数2
        if ((i & 1 && sum % i == 0) || (!(i & 1) && sum % i == i / 2)) {
            // 通过判断,滤掉不合适的i,剩下的都是能被整除的奇数,或者被除小数点= 0.5的偶数
            var arr = [];
            if (sum % i == 0) { // 当i为奇数
                for (var j = 0; j < i; j++){
                    arr[j] = sum / i - (i - 1) / 2 + j; // 例如i=3,向两边扩散,数组为2,3,4
                }
            } else { // i为偶数
                for (var j = 0; j < i; j++) {
                    arr[j] = Math.ceil(sum / i) - i / 2 + j;  // 例如i=4,向两边扩散,数组为3,4,5,6
                }
            }
            tmpArr.push(arr)
        }
    }
    tmpArr.sort(function (a, b) {
        return a[0] - b[0]
    })
    return tmpArr;
}
